<?xml version="1.0" encoding="UTF-8"?>
<!--
=====================================================================
EIP DEMO FILE 3: ADVANCED ENTERPRISE INTEGRATION PATTERNS
=====================================================================
This file demonstrates advanced EIP patterns for enterprise systems:

✅ ADVANCED MESSAGE PATTERNS:
   - Message Aggregator: Combine related messages
   - Message Resequencer: Reorder out-of-sequence messages
   - Scatter-Gather: Parallel processing with result collection
   - Process Manager: Long-running business processes

✅ RELIABILITY & PERSISTENCE PATTERNS:
   - Message Store: Persistent message storage
   - Dead Letter Queue: Error message handling
   - Retry Mechanism: Automatic message retry
   - Circuit Breaker: Fault tolerance

✅ INTEGRATION PATTERNS:
   - File Integration: File system adapters
   - External System Adapters: REST, SOAP, FTP
   - Message History: Track message processing
   - Control Bus: Runtime flow control

🎯 This file provides ENTERPRISE-GRADE reliability and integration!
=====================================================================
-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-file="http://www.springframework.org/schema/integration/file"
       xmlns:int-http="http://www.springframework.org/schema/integration/http"
       xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           https://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/integration
           https://www.springframework.org/schema/integration/spring-integration.xsd
           http://www.springframework.org/schema/integration/file
           https://www.springframework.org/schema/integration/file/spring-integration-file.xsd
           http://www.springframework.org/schema/integration/http
           https://www.springframework.org/schema/integration/http/spring-integration-http.xsd
           http://www.springframework.org/schema/integration/jms
           https://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
           http://www.springframework.org/schema/task
           https://www.springframework.org/schema/task/spring-task.xsd">

    <!-- ================================================================= -->
    <!-- ADVANCED PATTERN CHANNELS                                        -->
    <!-- ================================================================= -->
    
    <!-- Aggregation and sequencing channels -->
    <int:channel id="aggregationInputChannel"/>
    <int:channel id="partialResultChannel"/>
    <int:channel id="aggregatedResultChannel"/>
    <int:channel id="sequenceInputChannel"/>
    <int:channel id="resequencedOutputChannel"/>
    
    <!-- Scatter-Gather pattern channels -->
    <int:channel id="scatterChannel"/>
    <int:channel id="gatherChannel"/>
    <int:publish-subscribe-channel id="scatterPubSubChannel" 
                                   task-executor="advancedAsyncExecutor"/>
    
    <!-- File integration channels -->
    <int:channel id="fileInputChannel"/>
    <int:channel id="fileProcessingChannel"/>
    <int:channel id="fileOutputChannel"/>
    
    <!-- Error and retry channels -->
    <int:channel id="retryChannel"/>
    <int:channel id="permanentErrorChannel"/>
    <int:channel id="dlqChannel"/>
    
    <!-- Persistent channels for reliability -->
    <int:channel id="persistentProcessingChannel">
        <int:queue message-store="messageStore"/>
    </int:channel>

    <!-- ================================================================= -->
    <!-- ADVANCED ASYNC EXECUTORS ⚡                                     -->
    <!-- ================================================================= -->
    <bean id="advancedAsyncExecutor" 
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="20"/>
        <property name="queueCapacity" value="200"/>
        <property name="threadNamePrefix" value="EIP-Advanced-"/>
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy"/>
        </property>
    </bean>

    <!-- ================================================================= -->
    <!-- EIP PATTERN 12: MESSAGE AGGREGATOR 🧩                          -->
    <!-- PURPOSE: Combine related messages into a single composite message -->
    <!-- BUSINESS VALUE: Batch processing, related data consolidation      -->
    <!-- ================================================================= -->
    <int:aggregator id="orderAggregator"
                    input-channel="aggregationInputChannel"
                    output-channel="aggregatedResultChannel"
                    correlation-strategy-expression="headers.correlationId"
                    release-strategy-expression="size() >= 3 or T(System).currentTimeMillis() - timestamp > 10000"
                    message-store="messageStore"
                    send-partial-result-on-expiry="true"
                    expire-groups-upon-completion="true">
        <!-- Aggregation timeout: 10 seconds or when 3 messages collected -->
    </int:aggregator>
    
    <!-- Process aggregated results -->
    <int:service-activator input-channel="aggregatedResultChannel"
                           ref="aggregationProcessor"
                           method="processAggregatedMessage"/>
    
    <bean id="aggregationProcessor" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="AGGREGATION-PROCESSOR"/>
    </bean>

    <!-- ================================================================= -->
    <!-- EIP PATTERN 13: MESSAGE RESEQUENCER 🔢                         -->
    <!-- PURPOSE: Reorder out-of-sequence messages                        -->
    <!-- BUSINESS VALUE: Sequential processing, ordered data integrity     -->
    <!-- ================================================================= -->
    <int:resequencer id="messageResequencer"
                     input-channel="sequenceInputChannel"
                     output-channel="resequencedOutputChannel"
                     correlation-strategy-expression="headers.correlationId"
                     release-strategy-expression="size() == sequenceSize"
                     message-store="messageStore"
                     send-partial-result-on-expiry="true"
                     expire-groups-upon-timeout="30000">
        <!-- Resequence timeout: 30 seconds -->
    </int:resequencer>
    
    <!-- Add sequence information to messages -->
    <int:header-enricher input-channel="sequenceInputChannel" 
                         output-channel="sequenceInputChannel">
        <int:header name="sequenceNumber" 
                   expression="T(java.util.concurrent.ThreadLocalRandom).current().nextInt(1, 6)"/>
        <int:header name="sequenceSize" value="5"/>
    </int:header-enricher>

    <!-- ================================================================= -->
    <!-- EIP PATTERN 14: SCATTER-GATHER 🌪️                             -->
    <!-- PURPOSE: Send to multiple processors and collect results         -->
    <!-- BUSINESS VALUE: Parallel processing, result consolidation        -->
    <!-- ================================================================= -->
    
    <!-- Scatter phase: Broadcast to multiple processors -->
    <int:publish-subscribe-channel id="scatterChannel" 
                                   task-executor="advancedAsyncExecutor"/>
    
    <!-- Multiple parallel processors -->
    <int:service-activator input-channel="scatterChannel"
                           output-channel="gatherChannel"
                           ref="processorA"
                           method="processAsync"/>
    <int:service-activator input-channel="scatterChannel"
                           output-channel="gatherChannel"
                           ref="processorB"
                           method="processAsync"/>
    <int:service-activator input-channel="scatterChannel"
                           output-channel="gatherChannel"
                           ref="processorC"
                           method="processAsync"/>
    
    <!-- Processor beans -->
    <bean id="processorA" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="PROCESSOR-A"/>
    </bean>
    <bean id="processorB" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="PROCESSOR-B"/>
    </bean>
    <bean id="processorC" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="PROCESSOR-C"/>
    </bean>
    
    <!-- Gather phase: Collect and aggregate results -->
    <int:aggregator id="scatterGatherAggregator"
                    input-channel="gatherChannel"
                    output-channel="scatterGatherResultChannel"
                    correlation-strategy-expression="headers.correlationId"
                    release-strategy-expression="size() == 3"
                    expire-groups-upon-completion="true"/>
    
    <int:channel id="scatterGatherResultChannel"/>

    <!-- ================================================================= -->
    <!-- EIP PATTERN 15: MESSAGE STORE 💾                               -->
    <!-- PURPOSE: Persistent message storage for reliability              -->
    <!-- BUSINESS VALUE: Durability, recovery, audit trail               -->
    <!-- ================================================================= -->
    <bean id="messageStore" 
          class="org.springframework.integration.store.SimpleMessageStore"/>
    
    <!-- For production, use JDBC Message Store -->
    <!-- 
    <bean id="jdbcMessageStore" 
          class="org.springframework.integration.jdbc.store.JdbcMessageStore">
        <constructor-arg ref="dataSource"/>
    </bean>
    -->

    <!-- ================================================================= -->
    <!-- EIP PATTERN 16: RETRY MECHANISM 🔄                             -->
    <!-- PURPOSE: Automatic retry for failed message processing           -->
    <!-- BUSINESS VALUE: Fault tolerance, transient error handling        -->
    <!-- ================================================================= -->
    <int:channel id="retryableChannel">
        <int:queue capacity="10"/>
    </int:channel>
    
    <int:service-activator input-channel="retryableChannel"
                           ref="flakyService"
                           method="processMightFail">
        <int:request-handler-advice-chain>
            <bean class="org.springframework.integration.handler.advice.RequestHandlerRetryAdvice">
                <property name="retryTemplate">
                    <bean class="org.springframework.retry.support.RetryTemplate">
                        <property name="retryPolicy">
                            <bean class="org.springframework.retry.policy.SimpleRetryPolicy">
                                <property name="maxAttempts" value="3"/>
                            </bean>
                        </property>
                        <property name="backOffPolicy">
                            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                                <property name="initialInterval" value="1000"/>
                                <property name="multiplier" value="2"/>
                                <property name="maxInterval" value="10000"/>
                            </bean>
                        </property>
                    </bean>
                </property>
                <property name="recoveryCallback">
                    <bean class="com.ads.apiseng.handlers.RetryRecoveryCallback"/>
                </property>
            </bean>
        </int:request-handler-advice-chain>
    </int:service-activator>
    
    <bean id="flakyService" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="FLAKY-SERVICE"/>
    </bean>

    <!-- ================================================================= -->
    <!-- EIP PATTERN 17: DEAD LETTER QUEUE 💀                          -->
    <!-- PURPOSE: Handle permanently failed messages                      -->
    <!-- BUSINESS VALUE: Error isolation, manual intervention capability  -->
    <!-- ================================================================= -->
    <int:service-activator input-channel="dlqChannel"
                           ref="deadLetterProcessor"
                           method="handlePermanentFailure"/>
    
    <bean id="deadLetterProcessor" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="DEAD-LETTER-PROCESSOR"/>
    </bean>

    <!-- ================================================================= -->
    <!-- EIP PATTERN 18: FILE INTEGRATION ADAPTERS 📁                   -->
    <!-- PURPOSE: Integrate with file system for batch processing         -->
    <!-- BUSINESS VALUE: Batch file processing, legacy system integration -->
    <!-- ================================================================= -->
    
    <!-- Inbound file adapter: Monitor directory for new files -->
    <int-file:inbound-channel-adapter id="fileInputAdapter"
                                      directory="/tmp/input"
                                      channel="fileInputChannel"
                                      prevent-duplicates="true"
                                      auto-startup="true">
        <int:poller fixed-delay="5000"/>
    </int-file:inbound-channel-adapter>
    
    <!-- Process incoming files -->
    <int:service-activator input-channel="fileInputChannel"
                           output-channel="fileProcessingChannel"
                           ref="fileProcessor"
                           method="processFile"/>
    
    <bean id="fileProcessor" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="FILE-PROCESSOR"/>
    </bean>
    
    <!-- Transform file content -->
    <int:transformer id="fileContentTransformer"
                     input-channel="fileProcessingChannel"
                     output-channel="fileOutputChannel"
                     expression="'PROCESSED: ' + payload"/>
    
    <!-- Outbound file adapter: Write processed files -->
    <int-file:outbound-channel-adapter id="fileOutputAdapter"
                                       directory="/tmp/output"
                                       channel="fileOutputChannel"
                                       filename-generator-expression="'processed-' + T(System).currentTimeMillis() + '.txt'"/>

    <!-- ================================================================= -->
    <!-- EIP PATTERN 19: EXTERNAL SYSTEM INTEGRATION 🌐                 -->
    <!-- PURPOSE: Integrate with REST APIs and external services          -->
    <!-- BUSINESS VALUE: System interoperability, data synchronization    -->
    <!-- ================================================================= -->
    
    <!-- HTTP outbound gateway for external REST API calls -->
    <int-http:outbound-gateway id="externalApiGateway"
                               request-channel="externalApiChannel"
                               url="https://jsonplaceholder.typicode.com/posts"
                               http-method="POST"
                               expected-response-type="java.lang.String"
                               reply-timeout="30000"/>
    
    <int:channel id="externalApiChannel"/>
    
    <!-- Process external API responses -->
    <int:service-activator input-channel="externalApiChannel"
                           ref="apiResponseProcessor"
                           method="processApiResponse"/>
    
    <bean id="apiResponseProcessor" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="API-RESPONSE-PROCESSOR"/>
    </bean>

    <!-- ================================================================= -->
    <!-- EIP PATTERN 20: MESSAGE HISTORY 📚                             -->
    <!-- PURPOSE: Track message processing history for audit and debug    -->
    <!-- BUSINESS VALUE: Traceability, debugging, compliance              -->
    <!-- ================================================================= -->
    <int:message-history/>
    
    <!-- Wire tap for message history tracking -->
    <int:wire-tap id="historyTap" 
                  channel="persistentProcessingChannel"/>
    <int:channel id="historyTap"/>
    
    <int:service-activator input-channel="historyTap"
                           ref="historyTracker"
                           method="trackMessage"/>
    
    <bean id="historyTracker" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="HISTORY-TRACKER"/>
    </bean>

    <!-- ================================================================= -->
    <!-- EIP PATTERN 21: CONTROL BUS 🚌                                 -->
    <!-- PURPOSE: Runtime control and monitoring of integration flows     -->
    <!-- BUSINESS VALUE: Dynamic flow control, operational management     -->
    <!-- ================================================================= -->
    <int:control-bus id="controlBus" 
                     input-channel="controlChannel"/>
    
    <int:channel id="controlChannel"/>
    
    <!-- HTTP endpoint for control commands -->
    <int-http:inbound-gateway id="controlHttpGateway"
                              supported-methods="POST"
                              request-channel="controlChannel"
                              path="/api/control"
                              request-payload-type="java.lang.String"/>

    <!-- ================================================================= -->
    <!-- EIP PATTERN 22: PROCESS MANAGER 🏗️                            -->
    <!-- PURPOSE: Coordinate long-running business processes              -->
    <!-- BUSINESS VALUE: Complex workflow management, state tracking      -->
    <!-- ================================================================= -->
    <int:service-activator id="processManager"
                           input-channel="processManagerChannel"
                           ref="businessProcessManager"
                           method="manageProcess"/>
    
    <int:channel id="processManagerChannel"/>
    
    <bean id="businessProcessManager" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="PROCESS-MANAGER"/>
    </bean>

    <!-- ================================================================= -->
    <!-- CIRCUIT BREAKER PATTERN 🔌                                      -->
    <!-- PURPOSE: Prevent cascading failures in distributed systems       -->
    <!-- BUSINESS VALUE: System resilience, fault isolation              -->
    <!-- ================================================================= -->
    <int:service-activator input-channel="circuitBreakerChannel"
                           ref="protectedService"
                           method="callExternalService">
        <int:request-handler-advice-chain>
            <bean class="org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice">
                <property name="threshold" value="5"/>
                <property name="halfOpenAfter" value="12000"/>
                <property name="fallbackChannel" ref="fallbackChannel"/>
            </bean>
        </int:request-handler-advice-chain>
    </int:service-activator>
    
    <int:channel id="circuitBreakerChannel"/>
    <int:channel id="fallbackChannel"/>
    
    <bean id="protectedService" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="PROTECTED-SERVICE"/>
    </bean>
    
    <!-- Fallback handler -->
    <int:service-activator input-channel="fallbackChannel"
                           ref="fallbackHandler"
                           method="handleFallback"/>
    
    <bean id="fallbackHandler" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="FALLBACK-HANDLER"/>
    </bean>

    <!-- ================================================================= -->
    <!-- COMPREHENSIVE HTTP ENDPOINTS FOR TESTING 🧪                    -->
    <!-- ================================================================= -->
    
    <!-- Aggregation test endpoint -->
    <int-http:inbound-gateway id="aggregationTestEndpoint"
                              supported-methods="POST"
                              request-channel="aggregationInputChannel"
                              path="/api/advanced/aggregate"/>
    
    <!-- Resequencer test endpoint -->
    <int-http:inbound-gateway id="resequencerTestEndpoint"
                              supported-methods="POST"
                              request-channel="sequenceInputChannel"
                              path="/api/advanced/sequence"/>
    
    <!-- Scatter-Gather test endpoint -->
    <int-http:inbound-gateway id="scatterGatherTestEndpoint"
                              supported-methods="POST"
                              request-channel="scatterChannel"
                              path="/api/advanced/scatter-gather"/>
    
    <!-- Retry test endpoint -->
    <int-http:inbound-gateway id="retryTestEndpoint"
                              supported-methods="POST"
                              request-channel="retryableChannel"
                              path="/api/advanced/retry"/>

    <!-- ================================================================= -->
    <!-- MONITORING & METRICS 📊                                         -->
    <!-- ================================================================= -->
    <int:service-activator input-channel="aggregatedResultChannel"
                           ref="metricsCollector"
                           method="collectMetrics"/>
    
    <bean id="metricsCollector" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="METRICS-COLLECTOR"/>
    </bean>

</beans>