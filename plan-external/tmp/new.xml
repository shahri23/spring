# FILE 1: eip-basic-transforms.xml (FIXED)
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-http="http://www.springframework.org/schema/integration/http"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           classpath:org/springframework/beans/factory/xml/spring-beans.xsd
           http://www.springframework.org/schema/integration
           classpath:org/springframework/integration/config/xml/spring-integration.xsd
           http://www.springframework.org/schema/integration/http
           classpath:org/springframework/integration/http/config/xml/spring-integration-http.xsd">

    <!-- BASIC CHANNELS -->
    <int:channel id="inputChannel"/>
    <int:channel id="validationChannel"/>
    <int:channel id="transformationChannel"/>
    <int:channel id="outputChannel"/>
    <int:channel id="invalidMessageChannel"/>

    <!-- MESSAGE ENRICHER -->
    <int:enricher id="messageEnricher"
                  input-channel="inputChannel"
                  output-channel="validationChannel">
        <int:header name="enrichedTimestamp" expression="T(System).currentTimeMillis()"/>
        <int:header name="correlationId" expression="T(java.util.UUID).randomUUID().toString()"/>
        <int:header name="source" expression="'EIP-BASIC-DEMO'"/>
        <int:header name="stage" expression="'ENRICHED'"/>
    </int:enricher>

    <!-- MESSAGE FILTER -->
    <int:filter id="messageValidator"
                input-channel="validationChannel"
                output-channel="transformationChannel"
                discard-channel="invalidMessageChannel"
                expression="payload != null and payload.toString().trim().length() > 0"/>

    <!-- MESSAGE TRANSFORMER -->
    <int:transformer id="messageTransformer"
                     input-channel="transformationChannel"
                     output-channel="outputChannel"
                     expression="'PROCESSED: ' + payload.toString().toUpperCase()"/>

    <!-- SERVICE ACTIVATOR -->
    <int:service-activator input-channel="outputChannel"
                           ref="messageProcessor"
                           method="handle"/>
    <bean id="messageProcessor" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="BASIC-PROCESSOR"/>
    </bean>

    <!-- DEAD LETTER HANDLER -->
    <int:service-activator input-channel="invalidMessageChannel"
                           ref="errorHandler"
                           method="handle"/>
    <bean id="errorHandler" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="ERROR-HANDLER"/>
    </bean>

    <!-- HTTP ENDPOINT -->
    <int-http:inbound-gateway id="httpEndpoint"
                              supported-methods="POST"
                              request-channel="inputChannel"
                              path="/api/basic-transform"
                              reply-timeout="30000"/>
</beans>

# ============================================================================

# FILE 2: eip-routing-pubsub.xml (FIXED)
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-http="http://www.springframework.org/schema/integration/http"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           classpath:org/springframework/beans/factory/xml/spring-beans.xsd
           http://www.springframework.org/schema/integration
           classpath:org/springframework/integration/config/xml/spring-integration.xsd
           http://www.springframework.org/schema/integration/http
           classpath:org/springframework/integration/http/config/xml/spring-integration-http.xsd
           http://www.springframework.org/schema/task
           classpath:org/springframework/scheduling/config/spring-task.xsd">

    <!-- ROUTING CHANNELS -->
    <int:channel id="routingInputChannel"/>
    <int:channel id="jsonRoutingChannel"/>
    <int:channel id="xmlRoutingChannel"/>
    <int:channel id="csvRoutingChannel"/>
    <int:channel id="defaultRoutingChannel"/>
    
    <!-- PUB/SUB CHANNELS -->
    <int:publish-subscribe-channel id="orderEventChannel" 
                                   task-executor="routingAsyncExecutor"/>
    <int:publish-subscribe-channel id="inventoryEventChannel"
                                   task-executor="routingAsyncExecutor"/>
    
    <!-- CSV PROCESSING CHANNELS -->
    <int:channel id="csvItemChannel"/>
    <int:channel id="processedItemChannel"/>
    <int:channel id="csvStringChannel"/>

    <!-- ASYNC EXECUTOR -->
    <bean id="routingAsyncExecutor" 
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="2"/>
        <property name="maxPoolSize" value="5"/>
        <property name="queueCapacity" value="25"/>
        <property name="threadNamePrefix" value="EIP-Router-"/>
    </bean>

    <!-- CONTENT-BASED ROUTER -->
    <int:router id="contentBasedRouter"
                input-channel="routingInputChannel"
                expression="payload.toString().trim().startsWith('{') ? 'jsonRoutingChannel' :
                           (payload.toString().trim().startsWith('&lt;') ? 'xmlRoutingChannel' :
                           (payload.toString().contains(',') ? 'csvRoutingChannel' : 'defaultRoutingChannel'))">
    </int:router>

    <!-- HTTP BYTE ARRAY TO STRING TRANSFORMERS -->
    <int:transformer input-channel="jsonRoutingChannel"
                     output-channel="orderEventChannel"
                     expression="new java.lang.String(payload, 'UTF-8')"/>

    <int:transformer input-channel="xmlRoutingChannel"
                     output-channel="inventoryEventChannel"
                     expression="new java.lang.String(payload, 'UTF-8')"/>

    <int:transformer input-channel="csvRoutingChannel"
                 output-channel="csvStringChannel"
                 expression="payload instanceof T(java.lang.String) ? payload : new java.lang.String(payload, 'UTF-8')"/>
                     
    <!-- CSV PROCESSING -->
    <int:splitter id="csvMessageSplitter"
                  input-channel="csvStringChannel"
                  output-channel="csvItemChannel"
                  expression="payload.toString().split(',')"
                  apply-sequence="true"/>
    
    <int:transformer id="csvItemProcessor"
                     input-channel="csvItemChannel"
                     output-channel="processedItemChannel"
                     expression="'ITEM: ' + payload.toString().trim()"/>

    <int:service-activator input-channel="processedItemChannel"
                           output-channel="inventoryEventChannel"
                           ref="csvItemHandler"
                           method="handle"/>
    
    <bean id="csvItemHandler" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="CSV-ITEM-PROCESSOR"/>
    </bean>

    <!-- ORDER EVENT SUBSCRIBERS (PUB/SUB) -->
    <int:service-activator input-channel="orderEventChannel"
                           ref="orderService"
                           method="handle"/>
    <int:service-activator input-channel="orderEventChannel"
                           ref="auditService"
                           method="handle"/>
    <int:service-activator input-channel="orderEventChannel"
                           ref="emailService"
                           method="handle"/>
    <int:service-activator input-channel="orderEventChannel"
                           ref="analyticsService"
                           method="handle"/>
    
    <!-- INVENTORY EVENT SUBSCRIBERS (PUB/SUB) -->
    <int:service-activator input-channel="inventoryEventChannel"
                           ref="inventoryService"
                           method="handle"/>
    <int:service-activator input-channel="inventoryEventChannel"
                           ref="warehouseService"
                           method="handle"/>
    <int:service-activator input-channel="inventoryEventChannel"
                           ref="auditService"
                           method="handle"/>

    <!-- SERVICE BEANS -->
    <bean id="orderService" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="ORDER-SERVICE"/>
    </bean>
    <bean id="inventoryService" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="INVENTORY-SERVICE"/>
    </bean>
    <bean id="warehouseService" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="WAREHOUSE-SERVICE"/>
    </bean>
    <bean id="auditService" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="AUDIT-SERVICE"/>
    </bean>
    <bean id="emailService" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="EMAIL-NOTIFICATION-SERVICE"/>
    </bean>
    <bean id="analyticsService" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="ANALYTICS-SERVICE"/>
    </bean>
    
    <!-- DEFAULT HANDLER -->
    <int:transformer input-channel="defaultRoutingChannel"
                     output-channel="defaultStringChannel"
                     expression="new java.lang.String(payload, 'UTF-8')"/>
                     
    <int:channel id="defaultStringChannel"/>
    
    <int:service-activator input-channel="defaultStringChannel"
                           ref="defaultHandler"
                           method="handle"/>
    
    <bean id="defaultHandler" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="DEFAULT-HANDLER"/>
    </bean>

    <!-- HTTP ENDPOINTS -->
    <int-http:inbound-gateway id="orderHttpEndpoint"
                              supported-methods="POST"
                              request-channel="jsonRoutingChannel"
                              path="/api/orders"/>
    
    <int-http:inbound-gateway id="inventoryHttpEndpoint"
                              supported-methods="POST"
                              request-channel="xmlRoutingChannel"
                              path="/api/inventory"/>
    
    <int-http:inbound-gateway id="batchHttpEndpoint"
                              supported-methods="POST"
                              request-channel="csvRoutingChannel"
                              path="/api/batch"/>

</beans>

# ============================================================================

# FILE 3: eip-advanced-patterns.xml (FIXED)
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-file="http://www.springframework.org/schema/integration/file"
       xmlns:int-http="http://www.springframework.org/schema/integration/http"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           classpath:org/springframework/beans/factory/xml/spring-beans.xsd
           http://www.springframework.org/schema/integration
           classpath:org/springframework/integration/config/xml/spring-integration.xsd
           http://www.springframework.org/schema/integration/file
           classpath:org/springframework/integration/file/config/xml/spring-integration-file.xsd
           http://www.springframework.org/schema/integration/http
           classpath:org/springframework/integration/http/config/xml/spring-integration-http.xsd">

    <!-- ADVANCED PATTERN CHANNELS -->
    <int:channel id="aggregationInputChannel"/>
    <int:channel id="aggregatedResultChannel"/>
    <int:publish-subscribe-channel id="scatterPubSubChannel"/>
    <int:channel id="gatherChannel"/>
    <int:channel id="fileInputChannel"/>
    <int:channel id="fileProcessingChannel"/>
    <int:channel id="retryChannel"/>
    <int:channel id="controlChannel"/>
    <int:channel id="fileOutputChannel"/>

    <!-- MESSAGE STORE -->
    <bean id="messageStore" 
          class="org.springframework.integration.store.SimpleMessageStore"/>

    <!-- AGGREGATOR PATTERN -->
    <int:aggregator id="orderAggregator"
                    input-channel="aggregationInputChannel"
                    output-channel="aggregatedResultChannel"
                    correlation-strategy-expression="headers.correlationId"
                    release-strategy-expression="size() >= 3 or T(System).currentTimeMillis() - timestamp > 10000"
                    message-store="messageStore"
                    send-partial-result-on-expiry="true"
                    expire-groups-upon-completion="true"/>
    
    <int:service-activator input-channel="aggregatedResultChannel"
                           ref="aggregationProcessor"
                           method="handle"/>
    
    <bean id="aggregationProcessor" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="AGGREGATION-PROCESSOR"/>
    </bean>

    <!-- SCATTER-GATHER PATTERN -->
    <int:service-activator input-channel="scatterPubSubChannel"
                           output-channel="gatherChannel"
                           ref="processorA"
                           method="handle"/>
    <int:service-activator input-channel="scatterPubSubChannel"
                           output-channel="gatherChannel"
                           ref="processorB"
                           method="handle"/>
    <int:service-activator input-channel="scatterPubSubChannel"
                           output-channel="gatherChannel"
                           ref="processorC"
                           method="handle"/>
    
    <bean id="processorA" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="PROCESSOR-A"/>
    </bean>
    <bean id="processorB" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="PROCESSOR-B"/>
    </bean>
    <bean id="processorC" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="PROCESSOR-C"/>
    </bean>

    <!-- FILE INTEGRATION -->
    <int-file:inbound-channel-adapter id="fileInputAdapter"
                                      directory="/tmp/input"
                                      channel="fileInputChannel"
                                      prevent-duplicates="true"
                                      auto-startup="true">
        <int:poller fixed-delay="5000"/>
    </int-file:inbound-channel-adapter>
    
    <int:service-activator input-channel="fileInputChannel"
                           output-channel="fileProcessingChannel"
                           ref="fileProcessor"
                           method="handle"/>
    
    <bean id="fileProcessor" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="FILE-PROCESSOR"/>
    </bean>
    
    <int:transformer id="fileContentTransformer"
                     input-channel="fileProcessingChannel"
                     output-channel="fileOutputChannel"
                     expression="'PROCESSED: ' + payload"/>
    
    <int-file:outbound-channel-adapter id="fileOutputAdapter"
                                       directory="/tmp/output"
                                       channel="fileOutputChannel"
                                       filename-generator-expression="'processed-' + T(System).currentTimeMillis() + '.txt'"/>

    <!-- RETRY PATTERN (SIMPLIFIED) -->
    <int:service-activator input-channel="retryChannel"
                           ref="flakyService"
                           method="handle"/>
    
    <bean id="flakyService" class="com.ads.apiseng.handlers.SimpleHandler">
        <constructor-arg value="FLAKY-SERVICE"/>
    </bean>

    <!-- CONTROL BUS -->
    <int:control-bus id="controlBus" 
                     input-channel="controlChannel"/>

    <!-- HTTP ENDPOINTS -->
    <int-http:inbound-gateway id="aggregationTestEndpoint"
                              supported-methods="POST"
                              request-channel="aggregationInputChannel"


                              <build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
        
        <!-- Download schemas during build -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
                <execution>
                    <id>copy-schemas</id>
                    <phase>generate-resources</phase>
                    <goals>
                        <goal>copy</goal>
                    </goals>
                    <configuration>
                        <artifactItems>
                            <artifactItem>
                                <groupId>org.springframework.integration</groupId>
                                <artifactId>spring-integration-core</artifactId>
                                <type>jar</type>
                                <overWrite>true</overWrite>
                                <outputDirectory>${project.build.directory}/schemas</outputDirectory>
                            </artifactItem>
                        </artifactItems>
                    </configuration>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>